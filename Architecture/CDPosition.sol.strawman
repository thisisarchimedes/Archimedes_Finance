contract CDPosition {
    uint256 private gloablCollateralRate;

    struct CDP {
        uint256 oUSDPrinciple; // Amount of OUSD originally deposited by user
        uint256 oUSDInterestEarned; // Total interest earned (and rebased) so far
        uint256 oUSDTotal; // Principle + OUSD acquired from selling borrowed lvUSD + Interest earned
        uint256 lvUSDBorrowed; // Total lvUSD borrowed under this position
        uint256 shares; // ERC4626 VaultOUSD shares under this position
    }

    mapping(uint256 => CDP) private nftCDP;
    mapping(address => CDP) private addressCDP;

    /* Privileged functions: Governor  */

    /// @dev update EOA of treasury. EOA is multi-sig.
    ///
    /// @param newTreasuryAddress new EOA address of treasury
    function changeTreasuryAddress(address newTreasuryAddress) external;

    /// @dev update collateral rate 
    ///
    /// @notice Max lvUSD that can be minted for 1 OUSD
    ///
    /// @param ratio
    function changeCollateralRate(uint256 ratio) external;

    /* Privileged functions: Executive  */

    /// @dev add new entry to NFTID<>CP map with ousdPrinciple.
    ///
    ///
    /// @param nftID newly minted NFT
    /// @param ousdPrinciple initial OUSD investment (ie position principle)
    function createPosition(uint256 nftID, uint256 ousdPrinciple) external;

    /// @dev delete entry in CDP --if-- lvUSD borrowed balance is zero
    ///
    /// @param nftID entry address to delete
    function deletePosition(uint256 nftID) external;

    function borrowLvUSDFromPosition(uint256 nftID,uint256 lvUSDAmountToBorrow) external;
    function repayLvUSDToPosition(uint256 nftID, uint lvUSDAmountToRepay) external;
    function depositOUSDtoPosition(uint256 nftID, uint256 ousdAmountToDeposit) external;
    function withdrawOusdFromPosition(uint256 nftID, uint256 ousdAmountToWithdraw) external;

    /// @dev assign 4626 vault shares to a CDP NFT ID entry
    /// @param nftID nft ID to assign shares to
    /// @param sharesAmountToAssign number of shares to assign
    function assignSharesToPosition(uint256 nftID, uint256 sharesAmountToAssign) external

    /// Public Methods /// 

    /// EXPAND get a reader for every item in CDP struct  - EXPAND
    function getOUSDPrinciple(uint256 nftID) view external; 

    /// @dev get how much NFTid can (yet) borrow in lvUSD
    /// @notice Amount availble to borrow = [collateralization rate - (Amount lvUSD borrowed / Total OUSD under this position)] * Total OUSD under this position 
    ///
    /// @param nftID 
    function amountOfLvUSDAvailableToBorrow(uint256 nftID) view public; -- need to know collateral rate  
}