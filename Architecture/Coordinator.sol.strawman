
* Deposit against Address - need to deal with rebasing (getting more OUSD)
* Deposit/withdraw/borrow/repay under NFT (maybe leverage engine deals with NFT and this contract is agnostic?)
** problem is with liquidation and people taking different leverage - so probably nope
* change collateral rate
* split to minter and coordinator? TBD

import {AdminConfig} from "./libraries/AdminConfig.sol";

contract Coordinator is ReentrancyGuard. Ownable {

  using AdminConfig;


    // parameters for contract
    // - lvUSD Token contract address 
    // - OUSD/lvUSD Vault contract address

/* Privileged functions: Governor */

/// @dev change orginiation fee
///
/// How much of principle is taken as protocol fees, each time lvUSD is borrowed
/// Shoud emit an event
/// 
/// @param _fee in percentage 
function changeOriginiationFee(uint256 _fee) external nonReentrant expectInitialized ;

 /// @dev update EOA of treasury. EOA is multi-sig.
 ///
 /// @param newTreasuryAddress new EOA address of treasury
 function changeTreasuryAddress(address newTreasuryAddress) external;

/* Privileged functions: Executive */

/// @dev deposit OUSD under NFT ID
///
/// User sends OUSD to the contract. OUSD is written under NFT ID
///
/// @param _amount the amount of OUSD sent to Archimedes
/// @param _nftId the Archimedes ERC-721 token id
function depositCollateralUnderNFT(uint256 _amount, uint256 _nftId) external nonReentrant onlyWhitelisted expectInitialized ;

/// @dev withdraw OUSD under NFT ID
///
/// User withraw OUSD to the contract
///
/// @param _nftId the Archimedes ERC-721 token id
/// @param uint256 sum to withdraw
function withdrawCollateralUnderNFT(uint256 _amount, uint256 _nftId) external nonReentrant onlyWhitelisted expectInitialized ;

/// @dev Borrow lvUSD under NFT ID
///
/// User borrow lvUSD against the OUSD deposited as collateral in Vault
/// Need to check collaterallization ratio
/// Need to collect origination fee and sent them to vault
///
/// @param _amount the amount of lvUSD requested
/// @param _nftId the Archimedes ERC-721 token id
function borrowUnderNFT(uint256 _amount, uint256 _nftId) external nonReentrant onlyWhitelisted expectInitialized ;

/// @dev Repay lvUSD under NFT ID
///
/// User repay lvUSD against the OUSD deposited as collateral 
/// Need to check collaterallization ratio
///
/// @param _amount the amount of lvUSD requested
/// @param _nftId the Archimedes ERC-721 token id
function repayUnderNFT(uint256 _amount, uint256 _nftId) external nonReentrant onlyWhitelisted expectInitialized ;

/// TODO: Should this be accessed by admin only or not? <<<<
/// @dev deposit OUSD under address (vs. under NFT token ID)
///
/// User sends OUSD to the contract. OUSD is written under msg.sender
///
/// @param _amount the amount of OUSD sent to Archimedes
function depositCollateralUnderAddress(uint256 _amount) external nonReentrant expectInitialized ;

/// @dev withraw OUSD under address (vs. under NFT token ID)
///
/// User withraw OUSD to the contract
/// If user borrowed lvUSD against OUSD, they need to repay at least some of the
/// borrowed lvUSD first (to bring collateral ratio below the threshold)
///
/// @param _amount the amount of OUSD user request to withdraw
function withdrawCollateralUnderAddress(uint256 _amount) external nonReentrant expectInitialized ;

/// @dev Borrow lvUSD under address (vs. under NFT token ID)
///
/// User borrow lvUSD against the OUSD deposited as collateral
/// Need to check collaterallization ratio
/// Need to collect origination fee and sent them to vault
///
/// @param _amount the amount of lvUSD requested
function borrowUnderAddress(uint256 _amount) external nonReentrant expectInitialized ;

/// @dev Repay lvUSD under address (vs. under NFT token ID)
///
/// User repay lvUSD against the OUSD deposited as collateral
///
/// @param _amount the amount of lvUSD requested
function repayUnderAddress(uint256 _amount) external nonReentrant expectInitialized ;

}
